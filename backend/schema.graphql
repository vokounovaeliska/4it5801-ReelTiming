# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthInfo {
  token: String!
  user: User!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Department {
  id: ID!
  name: String!
}

type Mutation {
  activateProjectUser(token: String!, userId: String!): Boolean!
  addDepartment(name: String!): Department!
  addInactiveUser(email: String!, name: String!, surname: String!): User!
  addProject(description: String, end_date: DateTimeISO, name: String!, production_company: String!, start_date: DateTimeISO): Project!
  addProjectUser(departmentId: String = null, invitation: String = null, isTeamLeader: Boolean = false, phone_number: String = null, position: String = null, projectId: String!, rateId: String = null, role: String = null, userId: String!): ProjectUser!
  addRate(compensation_rate: Float!, overtime_hour1: Float!, overtime_hour2: Float!, overtime_hour3: Float!, overtime_hour4: Float!, standard_rate: Float!): Rate!
  deleteDepartment(departmentId: String!): Boolean!
  deleteProject(projectId: String!): Boolean!
  deleteProjectUser(projectId: String!, userId: String!): Boolean!
  deleteRate(rateId: String!): Boolean!
  deleteUser(userId: String!): Boolean!
  forgotPassword(email: String!): Boolean!
  inviteUser(projectId: String!, userId: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): AuthInfo!
  signIn(email: String!, password: String!): AuthInfo!
  signUp(email: String!, name: String!, password: String!, surname: String!): AuthInfo!
  updateDepartment(departmentId: String!, name: String!): Department!
  updateProject(data: ProjectInput!, projectId: String!): Project!
  updateProjectUser(data: ProjectUserInput!, id: String!): ProjectUser!
  updateRate(data: RateInput!, rateId: String!): Rate!
  updateUser(data: UserInput!, userId: String!): User!
}

type Project {
  create_date: DateTimeISO!
  create_user_id: String!
  description: String!
  end_date: DateTimeISO
  id: ID!
  is_active: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  name: String!
  production_company: String!
  start_date: DateTimeISO
}

input ProjectInput {
  create_date: DateTimeISO
  create_user_id: String
  description: String!
  end_date: DateTimeISO
  is_active: Boolean
  last_update_date: DateTimeISO
  last_update_user_id: String
  name: String
  production_company: String
  start_date: DateTimeISO
}

type ProjectUser {
  create_date: DateTimeISO!
  create_user_id: String!
  department: Department
  id: ID!
  invitation: String
  is_active: Boolean!
  is_team_leader: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  number_of_people: Float
  phone_number: String
  position: String
  project: Project!
  rate: Rate
  role: String
  user: User!
}

input ProjectUserInput {
  department_id: String
  invitation: String
  is_active: Boolean
  is_team_leader: Boolean = false
  number_of_people: Float
  phone_number: String
  position: String
  project_id: String!
  rate_id: String
  role: String
  user_id: String!
}

type Query {
  _empty: String!
  department(id: String!): Department
  departments: [Department!]!
  project(id: String!): Project
  projectUser(id: String!): ProjectUser
  projectUsers(projectId: String!): [ProjectUser!]!
  projectUsersByToken(token: String!): ProjectUser!
  project_users: [ProjectUser!]!
  projects: [Project!]!
  rate(id: String!): Rate
  rates: [Rate!]!
  user(id: String!): User
  userProjects(userId: String!): [Project!]!
  userRoleInProject(projectId: String!, userId: String!): String
  users: [User!]!
}

type Rate {
  compensation_rate: Float
  create_date: DateTimeISO!
  create_user_id: String!
  id: ID!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  overtime_hour1: Float
  overtime_hour2: Float
  overtime_hour3: Float
  overtime_hour4: Float
  standard_rate: Float
}

input RateInput {
  compensation_rate: Float
  create_date: DateTimeISO
  create_user_id: String
  last_update_date: DateTimeISO
  last_update_user_id: String
  overtime_hour1: Float
  overtime_hour2: Float
  overtime_hour3: Float
  overtime_hour4: Float
  standard_rate: Float
}

type User {
  create_date: DateTimeISO!
  create_user_id: String!
  email: String!
  id: ID!
  is_active: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  name: String!
  password_reset_expiration_time: DateTimeISO
  password_reset_token: String
  surname: String!
}

input UserInput {
  create_date: DateTimeISO
  create_user_id: String
  email: String
  is_active: Boolean
  last_update_date: DateTimeISO
  last_update_user_id: String
  name: String
  password_reset_expiration_time: DateTimeISO
  password_reset_token: String
  surname: String
}