# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthInfo {
  token: String!
  user: User!
}

type Car {
  create_date: DateTimeISO!
  create_user_id: String!
  id: ID!
  kilometer_allow: Float!
  kilometer_rate: Float!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  name: String!
  projectUser: ProjectUser!
}

input CarInput {
  create_date: DateTimeISO
  create_user_id: String
  kilometer_allow: Float!
  kilometer_rate: Float!
  last_update_date: DateTimeISO
  last_update_user_id: String
  name: String!
  project_user_id: String!
}

type CarStatement {
  car_id: String!
  kilometers: Float
}

type DailyReport {
  create_date: DateTimeISO
  footer: [ReportItem!]!
  id: ID!
  intro: [ReportItem!]!
  last_update_date: DateTimeISO
  project: Project
  shootingDay: ShootingDay
  shooting_progress: [ReportItem!]!
}

input DailyReportInput {
  footer: [ReportItemInput!]!
  intro: [ReportItemInput!]!
  project_id: String!
  shooting_day_id: String!
  shooting_progress: [ReportItemInput!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Department {
  id: ID!
  is_visible: Boolean
  name: String!
  order_index: Float
  project: Project
}

input DepartmentInput {
  is_visible: Boolean
  name: String!
  order_index: Float
  project_id: String!
}

type Mutation {
  activateProjectUser(token: String!, userId: String!): Boolean!
  addCar(kilometer_allow: Float!, kilometer_rate: Float!, name: String!, project_user_id: String!): Car!
  addDailyReport(footer: [ReportItemInput!]!, intro: [ReportItemInput!]!, projectId: String!, shooting_day_id: String!, shooting_progress: [ReportItemInput!]!): DailyReport!
  addDepartment(isVisible: Boolean, name: String!, orderIndex: Float, projectId: String): Department!
  addProject(create_user_id: String, currency: String, description: String, end_date: DateTimeISO, logo: String, name: String!, production_company: String!, start_date: DateTimeISO): Project!
  addProjectUser(departmentId: String = null, email: String!, invitation: String = null, isTeamLeader: Boolean = false, name: String!, phone_number: String = null, position: String = null, projectId: String!, rateId: String = null, role: String = "CREW", surname: String!, userId: String = null): ProjectUser!
  addRate(compensation_rate: Float!, overtime_hour1: Float!, overtime_hour2: Float!, overtime_hour3: Float!, overtime_hour4: Float!, standard_rate: Float!): Rate!
  addShootingDay(date: DateTimeISO!, eventType: String, projectId: String!, shootingDayNumber: Float!): ShootingDay!
  addStatement(calculated_overtime: Float = null, car_id: String = null, claimed_overtime: Float = null, from: DateTimeISO!, kilometers: Float = null, project_user_id: String!, shift_lenght: Float!, start_date: DateTimeISO!, to: DateTimeISO!): Statement!
  deleteCar(id: String!): Boolean!
  deleteDailyReport(dailyReportId: String!): Boolean!
  deleteDepartment(departmentId: String!): Boolean!
  deleteInvitation(projectUserId: String!): Boolean!
  deleteProject(projectId: String!): Boolean!
  deleteProjectUser(projectUserId: String!): Boolean!
  deleteRate(rateId: String!): Boolean!
  deleteShootingDay(shootingDayId: String!): Boolean!
  deleteStatement(id: String!): Boolean!
  deleteUser(userId: String!): Boolean!
  forgotPassword(email: String!): Boolean!
  inviteUser(email: String!, name: String!, projectUserId: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): AuthInfo!
  signIn(email: String!, password: String!): AuthInfo!
  signUp(email: String!, name: String!, password: String!, phone_number: String, surname: String!): AuthInfo!
  updateCar(data: CarInput!, id: String!): Car!
  updateDailyReport(dailyReportId: String!, data: DailyReportInput!): DailyReport!
  updateDepartment(data: DepartmentInput!, departmentId: String!): Department!
  updateProject(data: ProjectInput!, projectId: String!): Project!
  updateProjectUser(data: ProjectUserInput!, id: String!): ProjectUser!
  updateRate(data: RateInput!, rateId: String!): Rate!
  updateShootingDay(data: ShootingDayInput!, shootingDayId: String!): ShootingDay!
  updateUser(data: UserInput!, userId: String!): User!
  updatestatement(data: StatementInput!, id: String!): Statement!
}

type Project {
  create_date: DateTimeISO!
  create_user_id: String!
  currency: String!
  departments: [Department!]
  description: String!
  end_date: DateTimeISO
  id: ID!
  is_active: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  logo: String
  name: String!
  production_company: String!
  start_date: DateTimeISO
}

input ProjectInput {
  create_date: DateTimeISO
  create_user_id: String
  currency: String
  description: String!
  end_date: DateTimeISO!
  is_active: Boolean
  last_update_date: DateTimeISO
  last_update_user_id: String
  logo: String
  name: String!
  production_company: String!
  start_date: DateTimeISO!
}

type ProjectUser {
  car: [Car!]
  create_date: DateTimeISO!
  create_user_id: String!
  department: Department
  email: String!
  id: ID!
  invitation: String
  is_active: Boolean!
  is_team_leader: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  name: String!
  number_of_people: Float
  phone_number: String
  position: String
  project: Project!
  rate: Rate
  role: String
  statement: [Statement!]!
  surname: String!
  user: User
}

input ProjectUserInput {
  department_id: String
  email: String!
  invitation: String
  is_active: Boolean
  is_team_leader: Boolean = false
  name: String!
  number_of_people: Float
  phone_number: String
  position: String
  project_id: String!
  rate_id: String
  role: String
  surname: String!
  user_id: String
}

type Query {
  _empty: String!
  car(id: String!): Car
  carStatementsByProjectId(projectId: String!): [CarStatement!]!
  cars: [Car!]!
  carsByProjectUserId(projectUserId: String!): [Car!]!
  dailyReport(id: String!): DailyReport
  dailyReportsByProjectId(projectId: String!): [DailyReport!]!
  department(id: String!): Department
  departments(projectId: String!): [Department!]!
  getStatementsByDateRangeAndProjectUserId(endDate: DateTimeISO!, projectUserId: String!, startDate: DateTimeISO!): [Statement!]!
  lastDailyReportByProjectId(projectId: String!): [DailyReport!]!
  project(id: String!): Project
  projectUser(id: String!): ProjectUser
  projectUserDetails(projectId: String!, userId: String!): ProjectUser
  projectUsers(projectId: String!): [ProjectUser!]!
  projectUsersByToken(token: String!): ProjectUser!
  project_users: [ProjectUser!]!
  projects: [Project!]!
  rate(id: String!): Rate
  rates: [Rate!]!
  shootingDay(id: String!): ShootingDay
  shootingDaysByProject(projectId: String!): [ShootingDay!]!
  statement(id: String!): Statement
  statements: [Statement!]!
  statementsByProjectId(projectId: String!): [Statement!]!
  statementsByProjectUserId(projectUserId: String!): [Statement!]!
  statementsByUserId(userId: String!): [Statement!]!
  user(id: String!): User
  userProjects(userId: String!): [Project!]!
  userRoleInProject(projectId: String!, userId: String!): String
  users: [User!]!
}

type Rate {
  compensation_rate: Float
  create_date: DateTimeISO!
  create_user_id: String!
  id: ID!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  overtime_hour1: Float
  overtime_hour2: Float
  overtime_hour3: Float
  overtime_hour4: Float
  standard_rate: Float
}

input RateInput {
  compensation_rate: Float
  create_date: DateTimeISO
  create_user_id: String
  last_update_date: DateTimeISO
  last_update_user_id: String
  overtime_hour1: Float
  overtime_hour2: Float
  overtime_hour3: Float
  overtime_hour4: Float
  standard_rate: Float
}

type ReportItem {
  title: String!
  value: String!
}

input ReportItemInput {
  title: String!
  value: String!
}

type ShootingDay {
  date: DateTimeISO!
  event_type: String
  id: ID!
  project: Project
  shooting_day_number: Float!
}

input ShootingDayInput {
  date: DateTimeISO!
  event_type: String
  project_id: String!
  shooting_day_number: Float!
}

type Statement {
  calculated_overtime: Float
  car: Car
  car_id: String!
  claimed_overtime: Float
  create_date: DateTimeISO!
  create_user_id: String!
  from: DateTimeISO!
  id: ID!
  kilometers: Float
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  projectUser: ProjectUser!
  shift_lenght: Float!
  start_date: DateTimeISO!
  to: DateTimeISO!
}

input StatementInput {
  calculated_overtime: Float
  car_id: String
  claimed_overtime: Float
  create_date: DateTimeISO
  create_user_id: String
  from: DateTimeISO!
  kilometers: Float
  last_update_date: DateTimeISO
  last_update_user_id: String
  project_user_id: String!
  shift_lenght: Float!
  start_date: DateTimeISO!
  to: DateTimeISO!
}

type User {
  create_date: DateTimeISO!
  create_user_id: String!
  email: String!
  id: ID!
  is_active: Boolean!
  last_update_date: DateTimeISO!
  last_update_user_id: String!
  name: String!
  password_reset_expiration_time: DateTimeISO
  password_reset_token: String
  phone_number: String
  surname: String!
}

input UserInput {
  create_date: DateTimeISO
  create_user_id: String
  email: String
  is_active: Boolean
  last_update_date: DateTimeISO
  last_update_user_id: String
  name: String
  password_reset_expiration_time: DateTimeISO
  password_reset_token: String
  phone_number: String!
  surname: String
}